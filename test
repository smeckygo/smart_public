<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quiz UI</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="assets/style.css">


</head>
<body>
<div class="sidebar">
    <h1>Uixu</h1>
    <button id="generate-new-question">
        <i class="fa-solid fa-magnifying-glass"></i> √öj k√©rd√©s <span id="countdown"></span>
    </button>
    <div class="user-div">

    </div>
    <!-- üîπ User Card -->
    <!--div class="user-card">
        <img src="https://i.pravatar.cc/100" alt="User Avatar" class="user-avatar">
        <div class="user-info">
            <h2>John Doe</h2>
            <p class="points">Pontok: <span style="font-weight: bold;font-size: 20px">1240</span></p>
        </div>
    </div-->


    <!--button><i class="fas fa-hourglass-half"></i> Meccsek</button>
    <button><i class="fas fa-home"></i> Dashboard</button>
    <button><i class="fas fa-gamepad"></i> Quiz Mode</button>
    <button class="settings-btn"><i class="fas fa-cog"></i> Settings</button>
    <div class="settings-submenu">
        <button id="difficulty-bttn"><i class="fas fa-cog"></i> Difficulty </button>
        <button><i class="fas fa-bell"></i> Notifications</button>
        <button><i class="fas fa-lock"></i> Privacy</button>
    </div-->
</div>
<div class="content">
    <div class="gamesteps-container" style="display:none;">
        <div class="gamesteps-header">
        </div>
    </div>

    <div class="question-container" style="with:100%;">
        <div class="question-box" style="display:none;"></div>
    </div>
    <br>
    <div class="gamesessions">
        <div class="gamesteps-container user-info" style="display: block;">
            <div class="gamesteps-header user-info">L√©pj be egy meccsbe! Vagy hozz l√©tre egy √∫jat!
                <div>
                    <input type="text" placeholder="Meccs Neve" style="max-width:50% !important;height:45px;font-size: 23px;">
                        <button class="button-green new_game_session">L√©trehoz√°s</button>
                </div>
            </div>
        </div>
        <div class="sessions-container">
            <div class="session">Game Session
                <button style="right:200px;" class="button-green">Bel√©p√©s</button>
                <button style="right:10px;" class="button-gray disabled">V√©geredm√©ny</button>
            </div>
            <div class="session">Game Session 2
                <button style="right:200px;" class="button-gray disabled">Bel√©p√©s</button>
                <button style="right:10px;" class="button-green">V√©geredm√©ny</button>
            </div>
        </div>
    </div>
    <div class="options">
    </div>
    <div class="categories">
    </div>
</div>

<script>

    $(document).ready(function () {



        const ws = new WebSocket('ws://192.168.1.20:3000'); // WebSocket szerver
        let users = [];
        let typingTimeout;
        let hostSessionId = null;
        let divCounter = 0;
        let correctAnswerIndex = '';


        ws.onopen = function () {
            console.log('Connected to server');
            $('#status').text('Connected to server');
            if (!hostSessionId) {
                hostSessionId = 'sessionId'; // Gener√°lunk egy egyedi ID-t
                localStorage.setItem("hostSessionId", hostSessionId);
            }
            ws.send(JSON.stringify({  action: ['set_role', 'host'], role: 'host', sessionId: localStorage.getItem('hostSessionId') })); // Hostk√©nt csatlakoz√°s
        };

        ws.onmessage = function (event) {
            let gameSessionStarted = false;
            const message = JSON.parse(event.data);
            let firstLoad = false;

            console.log(message);

            if(message.action === 'categories'){
                console.log('categories', message.categories);
                localStorage.setItem('categories', JSON.stringify(message.categories));
                localStorage.setItem('game_session', message.game_session.session_id);
                console.log(localStorage.getItem('game_session'));
                showCategories(null);

                if(!firstLoad){
                    // ha el≈ësz√∂r castlakozik akkor el≈ësz√∂r a j√°t√©k v√°laszt katg√≥ri√°t
                    ws.send(JSON.stringify({  action: ['host', 'first_category_selection_timed_out']})); // Hostk√©nt csatlakoz√°s
                    firstLoad = true;
                }

            }

            if(message.action === 'category_acquired'){
                setTimeout(function(){
                    $('.category').eq(message.category[1]).addClass('selected');
                    //ws.send(JSON.stringify({  action: ['host', 'generate_new_question']})); // Hostk√©nt csatlakoz√°s
                }, 8000);
                /*$('.gamesteps-container').css('display', 'block').fadeIn('slow', function() {
                    $('.gamesteps-header').html('<i class="fas fa-exclamation-triangle"></i> <br>Hibat√∂rt√©nt! Nemsiker√ºlt √∫j k√©rd√©st gener√°lni!');
                    $(this).addClass('info'); // class hozz√°ad√°sa
                    $('.gamesteps-header').addClass('info'); // class hozz√°ad√°sa
                });*/
            }

            if(message.action === 'category_acquired_player'){
                    $('.category').eq(message.categoryIndex).addClass('selected');
                    //ws.send(JSON.stringify({  action: ['host', 'generate_new_question']})); // Hostk√©nt csatlakoz√°s


                /*$('.gamesteps-container').css('display', 'block').fadeIn('slow', function() {
                    $('.gamesteps-header').html('<i class="fas fa-exclamation-triangle"></i> <br>Hibat√∂rt√©nt! Nemsiker√ºlt √∫j k√©rd√©st gener√°lni!');
                    $(this).addClass('info'); // class hozz√°ad√°sa
                    $('.gamesteps-header').addClass('info'); // class hozz√°ad√°sa
                });*/
            }




            let inProgressSession = null;


            // V√©geredm√©ny visszak√ºld√©se a user adatokat √©s pontokat tartalmazva
            if (message.action === 'result') {

                if (Array.isArray(message.result) && message.result.length > 0) {
                    $('.option').eq(correctAnswerIndex).addClass('correct');
                    message.result.forEach(result => {

                        console.log('result ........', result);

                        addDiv(result.answerChoice, result.userName);

                        let answerElement = $('.option').eq(result.answerChoice);

                        if(!result.isCorrect){
                            answerElement.addClass('incorrect');
                        }


                        let sfId = result.userId;  // Session ID m√≥dos√≠t√°sa
                        console.log(`J√°t√©kos: ${sfId}, V√°lasz: ${result.answerChoice}, Helyes: ${result.isCorrect}, Sebess√©g: ${result.answerSpeed}`);
                        console.log('points : ', result.points);

                        // Friss√≠tj√ºk a pontsz√°mot √©s anim√°ljuk
                        let playerElement = $('#player-user-' + sfId);
                        if (playerElement.length) {
                            if (result.isCorrect) {
                                // Helyes v√°lasz eset√©n anim√°ci√≥val friss√≠tj√ºk a pontot √©s h√°tt√©rsz√≠nt
                                updatePlayerScoreWithAnimation(sfId, result.points);
                                playerElement.addClass('correct');  // Hozz√°adjuk a helyes v√°lasz oszt√°lyt
                            } else {
                                // Helytelen v√°lasz eset√©n anim√°ljuk a piros h√°tt√©rt
                                handleIncorrectAnswer(playerElement);
                                playerElement.addClass('incorrect');  // Hozz√°adjuk a helytelen v√°lasz oszt√°lyt
                            }
                        } else {
                            console.warn(`J√°t√©kos elem nem tal√°lhat√≥: ${sfId}`);
                        }

                        // Elt√°vol√≠tjuk a helyes √©s helytelen v√°lasz oszt√°lyokat a pontok hozz√°ad√°sa ut√°n
                        setTimeout(() => {
                            playerElement.removeClass('correct incorrect');  // Elt√°vol√≠tjuk az anim√°ci√≥s oszt√°lyokat
                        }, 2500);  // 2.5 m√°sodperc m√∫lva elt√°vol√≠tjuk
                    });
                    setTimeout(function(){
                        showCategories(message.worstPlayer.userName);
                    }, 3000);


                } else {
                    console.warn('message.result t√∂mb √ºres vagy nem megfelel≈ë form√°tum√∫.');
                }


            }

            function showCategories(playerName){
                $('.gamesessions').fadeOut('slow', function(){
                    $('.question-box').fadeIn('slow');
                });

                $('.categories').fadeIn('slow', function(){
                    setTimeout(() => { // 5 m√°sodperces k√©sleltet√©s
                        $('.option').remove(); // R√©gi opci√≥k t√∂rl√©se
                        $('.categories').empty(); // T√∂r√∂lj√ºk a kor√°bbi kateg√≥ri√°kat

                        let categories = JSON.parse(localStorage.getItem('categories'));
                        let headertxt = '' ;

                        if(playerName === null){
                            headertxt = 'A host √∫j t√©m√°t v√°laszt!'
                        }else{
                            headertxt = playerName + ' √©pp √∫j t√©m√°t v√°laszt!'
                        }

                        $('.question-box').text(headertxt);

                        categories.forEach((category, index) => {
                            setTimeout(() => {
                                let categoryElem = $('<div class="category"></div>')
                                    .text(category)
                                    .data('answer-id', index)
                                    .hide();

                                $('.categories').append(categoryElem);
                                categoryElem.fadeIn('slow');
                            }, index * 300); // K√©sleltet√©s n√∂vel√©se minden elemn√©l
                        });


                    }, 2000); // 5 m√°sodperces delay
                });
            }

// Anim√°ci√≥ a pontsz√°m folyamatos n√∂vel√©s√©re
            function updatePlayerScoreWithAnimation(playerId, pointsToAdd) {
                console.log(playerId);

                let playerElement = $('#player-user-' + playerId);

                if (playerElement.length) {
                    // √öj pontsz√°m-effekt hozz√°ad√°sa
                    let pointUpdateElement = $('<div class="point-update">')
                        .text(pointsToAdd >= 0 ? `+${pointsToAdd}` : `${pointsToAdd}`)
                        .css({
                            position: 'absolute',
                            top: '50%',
                            left: '50%',
                            transform: 'translate(-50%, -50%)',
                            fontSize: '20px',
                            color: pointsToAdd >= 0 ? 'green' : 'red',
                            opacity: 0,
                            fontWeight: 'bold',
                            zIndex: 1000
                        });

                    playerElement.append(pointUpdateElement);

                    // Pontsz√°m lebegtet√©s
                    pointUpdateElement.fadeTo(500, 1).animate({
                        top: '30%',
                        opacity: 0
                    }, 1000, function () {
                        $(this).remove();
                    });

                    // J√°t√©kos aktu√°lis pontja
                    let currentPoints = parseInt(playerElement.find('.user-points').text()) || 0;
                    let newPoints = currentPoints + pointsToAdd;
                    let increment = pointsToAdd / 50;

                    let interval = setInterval(() => {
                        currentPoints += increment;
                        playerElement.find('.user-points').text(Math.round(currentPoints));

                        if (Math.round(currentPoints) >= newPoints) {
                            clearInterval(interval);
                            playerElement.find('.user-points').text(newPoints);
                            animatePlayerSorting();
                        }
                    }, 20);
                } else {
                    console.warn(`Player with ID ${playerId} not found.`);
                }
            }

// J√°t√©kosok √°trendez√©se anim√°ci√≥val
            function animatePlayerSorting() {
                let userDiv = $('.user-div');
                let players = $('.user-div .user-card');
                let animationSpeed = 500; // Anim√°ci√≥ sebess√©ge (ms)

                // **Elt√°roljuk az eredeti poz√≠ci√≥kat √©s a DOM sorrendet**
                let initialPositions = {};
                let initialOrder = [];
                players.each(function (index) {
                    let $el = $(this);
                    initialPositions[$el.data('player-id') || index] = $el.position().top;
                    initialOrder.push($el.data('player-id') || index);
                });

                // **Pontok alapj√°n sorba rendezz√ºk a j√°t√©kosokat**
                let sortedPlayers = players.toArray().sort((a, b) => {
                    let scoreA = parseInt($(a).find('.user-point').text(), 10);
                    let scoreB = parseInt($(b).find('.user-point').text(), 10);
                    return scoreB - scoreA;
                });

                // **A DOM sorrendj√©t friss√≠tj√ºk (anim√°ci√≥val)**
                userDiv.css('position', 'relative'); // Sz√ºks√©ges az abszol√∫t pozicion√°l√°shoz

                // El≈ësz√∂r minden j√°t√©kost abszol√∫t poz√≠ci√≥ba helyez√ºnk az eredeti hely√©re
                players.each(function (index) {
                    let $el = $(this);
                    let playerId = $el.data('player-id') || index;
                    $el.css({
                        'position': 'absolute',
                        'top': initialPositions[playerId] + 'px',
                        'left': $el.position().left + 'px',
                        'width': $el.outerWidth(), // Fontos, hogy ne ugr√°ljon a sz√©less√©g
                        'z-index': 1 // Biztos√≠tja, hogy az anim√°lt elemek fel√ºl legyenek
                    });
                });

                // √úres userDiv, hogy a rendezett elemeket be tudjuk sz√∫rni
                userDiv.empty();

                // A rendezett elemeket hozz√°f≈±zz√ºk (ez m√©g nem l√°that√≥, mert abszol√∫t poz√≠ci√≥ban vannak)
                sortedPlayers.forEach(element => userDiv.append(element));

                // Most anim√°ljuk a top poz√≠ci√≥t az √∫j hely√ºkre
                $(sortedPlayers).each(function (index) {
                    let $el = $(this);
                    $el.animate({
                        'top': $el.position().top + 'px' // Az append ut√°ni √∫j poz√≠ci√≥
                    }, animationSpeed, function() {
                        // Anim√°ci√≥ v√©ge ut√°n vissza√°ll√≠tjuk a relat√≠v poz√≠ci√≥t az els≈ë 3-n√°l, hogy a sz√∂veg igazodjon
                        if (index < 3) {
                            $el.css('position', 'relative');
                        }
                    });

                    // **Top 3 j√°t√©kos kiemel√©se (anim√°ci√≥val)**
                    $el.removeClass('gold-medal silver-medal bronze-medal'); // El≈ëz≈ë kiemel√©sek elt√°vol√≠t√°sa

                    if (index === 0) {
                        $el.delay(animationSpeed / 2).queue(function(next) {
                            $(this).addClass('gold-medal');
                            next();
                        });
                    } else if (index === 1) {
                        $el.delay(animationSpeed / 2).queue(function(next) {
                            $(this).addClass('silver-medal');
                            next();
                        });
                    } else if (index === 2) {
                        $el.delay(animationSpeed / 2).queue(function(next) {
                            $(this).addClass('bronze-medal');
                            next();
                        });
                    }
                });

                // Az √∂sszes t√∂bbi j√°t√©kosn√°l is legyen egy kis √°tt≈±n√©s
                $(sortedPlayers).slice(3).each(function() {
                    $(this).css('opacity', 0).delay(animationSpeed).animate({ opacity: 1 }, animationSpeed / 2);
                });
            }






// Helytelen v√°lasz kezel√©se (r√°zk√≥d√°s anim√°ci√≥)
            function handleIncorrectAnswer(playerId) {
                /*let playerElement = $('#player-user-' + playerId);
                if (playerElement.length) {
                    playerElement.addClass('incorrect');

                    setTimeout(() => {
                        playerElement.removeClass('incorrect');
                    }, 500);
                }*/
            }


            if (message.gameSessions && Array.isArray(message.gameSessions)) {

                let $gameSessionsContainer = $('.gamesessions');

                // Csak azokat az elemeket t√∂r√∂lj√ºk, amelyek nem tartalmazz√°k a .persistent-session oszt√°lyt
                $gameSessionsContainer.children(':not(.gamesteps-container)').remove();

                // L√©trehozzuk a session-container div-et
                let $sessionContainer = $('<div>', { class: 'session-container' }).css({
                    marginTop: "35%"
                });

                message.gameSessions.forEach(session => {
                    if (!session) return;

                    // Session div l√©trehoz√°sa
                    let $sessionDiv = $('<div>', { class: 'session' }).text(session.game_name).css({
                        marginTop: "10px",
                        paddingLeft: 10,
                        paddingBottom: "-20px"
                    });

                    // Gombok kont√©nere
                    let $buttonContainer = $('<div>', { class: 'button-container' }).css({
                        display: 'flex',
                        gap: '10px'
                    });

                    let login, result = '';

                    if(session.status === "completed"){
                        login = 'button-gray disabled bttn-1';
                        result = 'button-green bttn-2';
                    }else{
                        login = 'button-green bttn-1';
                        result = 'button-gray disabled bttn-2';
                    }

                    // Bel√©p√©s gomb
                    let $joinButton = $('<button>', {
                        class: login,
                        text: 'Bel√©p√©s'
                    }).attr({
                        gameId: session.id
                    });

                    // V√©geredm√©ny gomb
                    let $resultButton = $('<button>', {
                        class: result,
                        text: 'V√©geredm√©ny'
                    }).attr({
                        gameId: session.id
                    });

                    // Gombok hozz√°ad√°sa a kont√©nerhez
                    $buttonContainer.append($joinButton, $resultButton);

                    // A session div-hez hozz√°adja a gomb-kont√©nert
                    $sessionDiv.append($buttonContainer);

                    // Session div hozz√°ad√°sa a session-container-hez
                    $sessionContainer.append($sessionDiv);
                });

                // V√©g√ºl a session-container hozz√°ad√°sa a .gamesessions div-hez
                $gameSessionsContainer.append($sessionContainer);
            }


            if (message.action === 'new_question') {
                // T√∂r√∂lj√ºk a kor√°bbi kateg√≥ri√°kat
                $('.option #player-div').remove();
                // K√©rd√©s √©s v√°laszok fadeOut anim√°ci√≥val elt≈±nnek
                $('.option, .categories').fadeOut('slow', function(){

                    $('.options, .categories').empty(); // A v√°laszok t√∂rl√©se
                });
                $('.question-box').fadeOut('slow', function () {
                    // K√©rd√©s √©s v√°laszok t√∂rl√©se a fadeOut anim√°ci√≥ ut√°n
                    $('.question-box').remove();

                    // 2 m√°sodperces k√©sleltet√©ssel kezdj√ºk az √∫j k√©rd√©s √©s v√°laszok megjelen√≠t√©s√©t
                    setTimeout(function () {
                        // K√©rd√©s hozz√°ad√°sa √∫jra
                        let questionElem = $('<div class="question-box"></div>')
                            .text(message.question.question)
                            .hide(); // Elrejtj√ºk a k√©rd√©st kezdetben

                        // K√©rd√©s hozz√°ad√°sa az oldalhoz
                        $('.question-container').append(questionElem);

                        // K√©rd√©s anim√°lt megjelen√≠t√©se
                        questionElem.fadeIn('slow');

                        let answers = message.question.answers;
                        let delay = 500; // Az els≈ë v√°lasz megjelen√©se ut√°n 2 m√°sodperc

                        // V√°laszok fokozatos megjelen√≠t√©se 2 m√°sodpercenk√©nt
                        answers.forEach((answer, index) => {
                            setTimeout(function () {
                                let answerElem = $('<div class="option"></div>')
                                    .text(answer.text)
                                    .data('answer-id', index)
                                    .hide(); // Elrejtj√ºk a v√°laszt kezdetben

                                // V√°lasz hozz√°ad√°sa
                                $('.options').append(answerElem);

                                if(answer.correct === true){
                                    console.log(index);
                                    correctAnswerIndex = index;
                                }

                                // FadeIn anim√°ci√≥ a v√°laszokra
                                answerElem.fadeIn('slow');
                                divArrays = [];
                            }, delay);

                            delay += 500; // K√©sleltet√©s n√∂vel√©se minden v√°lasz ut√°n
                        });

                        questionStartTime = performance.now(); // Id≈ëm√©r√©s ind√≠t√°sa
                    }, 1500); // 2 m√°sodperccel a k√©rd√©s ut√°n
                });

                // El≈ësz√∂r elt√°vol√≠tjuk a m√°r l√©tez≈ë esem√©nykezel≈ët
                $(document).off('click', '.answer');

                // √öj esem√©nykezel≈ë hozz√°ad√°sa
                $(document).on('click', '.answer', function (e) {
                    let answerId = $(this).data('answer-id');

                    submitAnswer(answerId); // V√°lasz elk√ºld√©se a szervernek

                    // Gombok letilt√°sa, hogy ne lehessen √∫jra r√°kattintani
                    $('.option').css('pointer-events', 'none');
                });
            }
            //localStorage.setItem('users');
            /*
            let loggedUsers = JSON.parse(localStorage.getItem('users'));

            console.log('loggeD_suers', loggedUsers);

            if(loggedUsers.length){
                console.log('van bel√©pett user');
                loggedUsersArray();
            }
*/
            $(document).on('click', 'button#generate-new-question', function() {
                const button = $(this);

                // Ha m√°r kattintottak a gombra, akkor ne csin√°ljon semmit
                if (button.data('clicked')) return;
                button.data('clicked', true); // Jelzi, hogy a gombot m√°r megnyomt√°k

                // Sz√ºrke sz≈±r≈ë a gombon
                button.css({'filter': 'grayscale(100%)'});

                console.log('new_question');
                ws.send(JSON.stringify({ action: ['host', 'generate_new_question']}));

                // Visszasz√°ml√°l√≥ elind√≠t√°sa
                startCountdown(button, 5); // 5 m√°sodperces visszasz√°ml√°l√≥ ind√≠t√°sa

                // K√©t m√°sodperc ut√°n vissza√°ll√≠tjuk a gomb sz√ºrke sz≈±r≈ëj√©t
                setTimeout(() => {
                    button.css({'filter': 'grayscale(0%)', 'transition': 'filter 0.5s ease'});
                    stopCountdown(button); // Le√°ll√≠tjuk a visszasz√°ml√°l√≥t, ha sz√ºks√©ges

                    // Enged√©lyezz√ºk √∫jra a gomb kattint√°s√°t
                    button.data('clicked', false);
                }, 5000);  // 5 m√°sodperc ut√°n vissza√°ll√≠tjuk a gombot
            });

            $(document).on('click', '.button-container .bttn-1', function() {
                var $button = $(this); // Mentse el a gombot

                // Ha a gomb m√°r le van tiltva, akkor nem k√ºld√ºnk t√∂bb k√©r√©st
                if ($button.prop('disabled')) {
                    return;
                }

                // Elk√ºldj√ºk az √ºzenetet
                ws.send(JSON.stringify({
                    action: ['host', 'enter_game_session'],
                    id: $button.attr('gameid')
                }));

                console.log('enter session: ', $button.attr('gameid'));

                // Letiltjuk a gombot, hogy ne lehessen r√°kattintani m√©g egyszer
                $button.prop('disabled', true);

                // Esem√©ny elt√°vol√≠t√°sa, hogy csak egyszer fusson le
                $button.off('click');
            });

            // Ind√≠tja a visszasz√°ml√°l√≥t
            function startCountdown(element, time) {
                let countdownValue = time;  // Az id≈ë, amit √°tadt√°l
                let countdownInterval = null; // Egyedi v√°ltoz√≥ minden egyes ind√≠t√°shoz

                // Hozz√°adunk egy adatkulcsot az elemhez, ami t√°rolja az intervallumot
                $(element).data('countdownInterval', setInterval(function() {
                    countdownValue--; // Cs√∂kkentj√ºk az √©rt√©ket
                    $('#countdown').text('(' + countdownValue + ')'); // Friss√≠tj√ºk a kijelz≈ët

                    if (countdownValue <= 0) {
                        clearInterval($(element).data('countdownInterval'));
                        $('#countdown').text(''); // T√∂r√∂lj√ºk a kijelz≈ët, ha v√©ge
                    }
                }, 1000)); // 1 m√°sodpercenk√©nt friss√≠tj√ºk
            }

// Le√°ll√≠tja a visszasz√°ml√°l√≥t az adott elemhez tartoz√≥ intervallumot
            function stopCountdown(element) {
                let countdownInterval = $(element).data('countdownInterval');
                if (countdownInterval) {
                    clearInterval(countdownInterval);
                    $('#countdown').text(''); // T√∂r√∂lj√ºk a kijelz≈ët
                    $(element).removeData('countdownInterval'); // Elt√°vol√≠tjuk az adatot
                }
            }

            let safeId = null;
            if(message.action === "hostReconnect") {

                Object.values(message.players).forEach((player) => {
                    safeId = 'player-session-' + player.session_id.replace(/\./g, '_');
                    $('.players-box').append('<div class="player" id="' + safeId + '">' + player.name + ' <span id="points">0</span></div>');
                });
            }

            switch (message.action) {
                case 'user_logged':
                    userLogged(message.user);
                    break;
                case 'user_disconnected' :
                    //userDisconnectedFadeColor(message.user_id);

                    break;
                case 'user_reconnected' :
                    userLogged(message.user);
                    break;
                case 'newPlayer' :
                    userLogged(message.user);
                    break;
                case 'player_scores' :
                    updatePlayerScores(message.scores);
                    console.log(message.scores);
                    break;
                case 'newSession' :
                    const newSession = message.gameSession[0];
                    safeId = 'player-session-' + newSession.session_id.replace(/\./g, '_');
                    $('.sessions-box').append('<div class="session" id="' + safeId + '">' + newSession.game_name + ' - ' + newSession.status + ' <span>X</span></div>');

                    break;
                case 'hostReconnect' :
                    //console.log('players', message.players);
                    Object.values(message.players).forEach((player) => {
                        safeId = 'player-session-' + player.session_id.replace(/\./g, '_');
                        $('.players-box').append('<div class="player" id="' + safeId + '">' + player.name + ' <span id="points">0</span></div>');
                    });
                    break;
                default:
                    console.warn('Unknown action:',);
                    break;
            }

            if(message.action === 'question_error'){
                $('.gamesteps-container').css('display', 'block').fadeIn('slow', function() {
                    $('.gamesteps-header').html('<i class="fas fa-exclamation-triangle"></i> <br>Hibat√∂rt√©nt! Nemsiker√ºlt √∫j k√©rd√©st gener√°lni!');
                    $(this).addClass('warning'); // class hozz√°ad√°sa
                    $('.gamesteps-header').addClass('error'); // class hozz√°ad√°sa
                });
            }



        };

        ws.onerror = function(event) {
            // Ha az elem nincs l√°that√≥an, el≈ësz√∂r megjelen√≠tj√ºk
            $('.gamesteps-container').css('display', 'block').fadeIn('slow', function() {
                $('.gamesteps-header').html('<i class="fas fa-exclamation-triangle"></i> <br>Hibat√∂rt√©nt! K√©rlek ellen≈ërizd a log-okat');
                $(this).addClass('error'); // class hozz√°ad√°sa
                $('.gamesteps-header').addClass('error'); // class hozz√°ad√°sa
            });
        };

        function loggedUsersArray(usersArray) {
            console.log('logged', usersArray);

            //if (!Array.isArray(usersArray) || usersArray.length === 0) return; // Ha nincs adat, kil√©p√ºnk

            console.log('Felhaszn√°l√≥k:', usersArray);

            usersArray.forEach(user => {
                let safeId = 'player-user-' + user.id;

                const userCardCount = $('.user-card[id="' + safeId + '"]').length;

                console.log('userCardCount:', userCardCount);

                if (userCardCount === 0) {
                    let playerCard = $('<div class="user-card" id="' + safeId + '">' + user.name + '<br>Pontok: <div id="points">0</div></div>');

                    playerCard.data('user-name', user.name);
                    playerCard.data('user-id', user.id);

                    $('.users').append(playerCard);
                    playerCard.hide().fadeIn('slow');
                } else {
                    console.log(`A(z) ${user.name} nev≈± felhaszn√°l√≥ m√°r l√©tezik.`);
                }

                // Ha a felhaszn√°l√≥ visszacsatlakozik, t√°vol√≠tsuk el a .disconnected oszt√°lyt
                let playerCard = $('.user-card[id="' + safeId + '"]');
                playerCard.removeClass('disconnected');
            });

            console.log('users_logged');
        }



        function userLogged(user) {
            // Alap√©rtelmezett pontok be√°ll√≠t√°sa, ha nincsenek.
            user.points = user.points || 0;

            users.push(user);
            localStorage.setItem('users', JSON.stringify(users));

            let safeId = 'player-user-' + user.id; // session_id helyett user_id

            // Ellen≈ërizz√ºk, hogy a felhaszn√°l√≥ m√°r l√©tezik-e
            if ($('.sidebar .user-card[id="' + safeId + '"]').length === 0) {

                let playerCard = $(`
            <div class="user-card" id="${safeId}">
                <img src="https://i.pravatar.cc/100" alt="User Avatar" class="user-avatar">
                <div class="user-info">
                    <h2>${user.name}</h2>
                    <p class="points">Pontok: <span class="user-points" style="font-weight: bold;font-size: 20px">0</span></p>
                </div>
            </div>
        `);

                playerCard.data('user-name', user.name);
                playerCard.data('user-id', user.id);

                $('.user-div').append(playerCard);
                playerCard.hide().fadeIn('slow');

            }
            // Ha a felhaszn√°l√≥ visszacsatlakozik, t√°vol√≠tsuk el a .disconnected oszt√°lyt
            $('.sidebar .user-card[id="' + safeId + '"]').removeClass('disconnected');
        }


        function userDisconnectedFadeColor(user_id) {
            console.log(user_id);
            // Safe ID gener√°l√°sa a user_id alapj√°n
            let safeId = 'player-user-' + user_id; // session_id helyett user_id

            // Ellen≈ërizz√ºk, hogy l√©tezik-e ilyen felhaszn√°l√≥
            let playerCard = $('.user-card[id=' + safeId + ']'); // Jav√≠tottunk az id keres√©s√©n

            console.log('cout', playerCard);

            if (playerCard.length) {
                // Hozz√°adjuk a "disconnected" oszt√°lyt
                playerCard.addClass('disconnected');

                // Fokozatos sz√≠nv√°lt√°s √©s √°rny√©k er≈ës√≠t√©s
                playerCard.animate({}, 1000, function() {
                    // Hozz√°adjuk az "active-shadow" oszt√°lyt, hogy az √°rny√©k er≈ës√∂dj√∂n

                    // K√©sleltet√©s ut√°n visszav√°ltunk az eredeti √°llapotba
                    setTimeout(function() {
                        // Elt√°vol√≠tjuk az "active-shadow" oszt√°lyt, hogy az √°rny√©k gyeng√ºlj√∂n
                        playerCard.removeClass('disconnected');
                    }, 2000); // 2 m√°sodperc ut√°n elt√°vol√≠tjuk az er≈ësebb √°rny√©kot
                });
                console.log('User disconnected and color changed:', safeId);
            }
        }

        function removeHomeContainer(){
            $('.container').remove();
        }


        function handlePlayerJoin(playerData) {
            let safeId = 'player-session-' + playerData.session_id.replace(/\./g, '_'); // Pontok cser√©je al√°h√∫z√°sra

            let playerElement = $('<p>')
                .attr('id', safeId) // Egyedi, biztons√°gos azonos√≠t√≥
                .text(playerData.playerName);

            $('#playersList').append(playerElement); // Hozz√°ad√°s a list√°hoz

            console.log('Player Joined:', playerData);
        }



        $('#broadcast').on('click', function () {
            // broadcast data
            console.log('broadcast');
            const playerSession = {
                action: ['host', 'send_message'],
                message: 'test_message'
            };
            ws.send(JSON.stringify(playerSession));
        });


        function handleGameSessions(message) {
            console.log(message.serverData) ;
            serverInfo = message.serverData[0];

            if (message.inProgress) {

                $( "<p>"+serverInfo.game_name+"</p>" ).appendTo( "#server-status" );
                $('#createGameButton').remove();
            }
        }


        // A settings men√º almen√ºj√©nek a megjelen√≠t√©se
        $('.settings-btn').click(function() {
            $(this).toggleClass('active');  // Kattint√°sra v√°ltja az 'active' oszt√°lyt
            $(this).next('.settings-submenu').slideToggle();  // Megjelen√≠ti/elt√ºnteti az almen√ºt
        });

        // T√∂mb, amely tartalmazza a div-eket
        let divArrays = [];

        function addDiv(answerChoice, userName) {
            const optionContainer = $('.option').eq(answerChoice); // Az adott v√°lasz kont√©nere

            // Keres√ºnk egy megl√©v≈ë player-container-t, ha nincs, l√©trehozzuk
            let playerContainer = optionContainer.find('.player-container');
            if (playerContainer.length === 0) {
                playerContainer = $('<div class="player-container"></div>');
                optionContainer.append(playerContainer);
            }

            // √öj j√°t√©kos div l√©trehoz√°sa
            const newDiv = $('<div class="player-div">' + userName + '</div>');

            // J√°t√©kos hozz√°ad√°sa a containerhez
            playerContainer.append(newDiv);
        }


        function createTypeWriter(text, elementId, speed) {
            let i = 0;
            const $element = $("#" + elementId);
            let typingTimeout;

            function type() {
                if (i < text.length) {
                    $element.append(text.charAt(i)); // A sz√∂veg egy karakter√©t hozz√°adjuk az elemhez
                    i++;
                    typingTimeout = setTimeout(type, speed); // Rekurz√≠v h√≠v√°s, hogy minden karaktert egyes√©vel √≠rjon ki
                } else {
                    setTimeout(function() {
                        $element.html(''); // A sz√∂veg t√∂rl√©se, ha teljesen ki√≠rta
                        i = 0; // Vissza√°ll√≠tjuk az indexet
                        type(); // √öjraind√≠tjuk a g√©pel√©st
                    }, 1000); // V√°r 1 m√°sodpercet (testreszabhat√≥) a sz√∂veg √∫jraindul√°s√°hoz
                }
            }

            return {
                start: function() {
                    type(); // Elind√≠tja a g√©pel√©st
                },
                stop: function() {
                    clearTimeout(typingTimeout); // Meg√°ll√≠tja a t√≠pus hat√°st
                    $element.html(''); // T√∂rli a sz√∂veget, ha le√°ll√≠tjuk
                }
            };
        }

        let writer1 = createTypeWriter("", "output", 200);
        //writer1.start();
        // le√°ll√≠tja az adott typert
        //writer1.stop();

    });
</script>
</body>
</html>
